Here are some intermediate-level notes on Python dictionaries:

1. Dictionary Comprehension
- Dictionary comprehension is a concise way to create dictionaries. It's similar to list comprehension but produces a dictionary.
  
```python
squares = {x: x2 for x in range(1, 6)}
print(squares)  # Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
```

2. Accessing Values Safely Using `get()`
- The `get()` method is used to safely access values in a dictionary without causing a `KeyError` if the key is missing. You can also specify a default value.

```python
d = {'a': 1, 'b': 2}
print(d.get('b'))  # Output: 2
print(d.get('c', 'Not Found'))  # Output: Not Found
```

3. Merging Dictionaries
- Python 3.9+ allows you to merge two dictionaries using the `|` (union) operator or the `update()` method (which works in earlier versions too).

```python
# Python 3.9+
d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
d3 = d1 | d2
print(d3)  # Output: {'a': 1, 'b': 3, 'c': 4}

# update() works in Python 3.6+
d1.update(d2)
print(d1)  # Output: {'a': 1, 'b': 3, 'c': 4}
```

4. Iterating Over Dictionaries
- Iterating through keys, values, and key-value pairs:
  - `keys()` – to iterate over keys.
  - `values()` – to iterate over values.
  - `items()` – to iterate over key-value pairs.

```python
d = {'a': 1, 'b': 2, 'c': 3}

# Iterating over keys
for key in d.keys():
    print(key)  # Output: a, b, c

# Iterating over values
for value in d.values():
    print(value)  # Output: 1, 2, 3

# Iterating over key-value pairs
for key, value in d.items():
    print(f'{key}: {value}')  # Output: a: 1, b: 2, c: 3
```

5. Deleting Items Safely Using `pop()` and `popitem()`
- `pop(key)` removes the key-value pair by key and returns the value.
- `popitem()` removes and returns the last inserted key-value pair as a tuple.
  
```python
d = {'a': 1, 'b': 2, 'c': 3}

# pop(key)
value = d.pop('b')
print(value)  # Output: 2
print(d)  # Output: {'a': 1, 'c': 3}

# popitem()
key, value = d.popitem()
print(key, value)  # Output: 'c', 3
print(d)  # Output: {'a': 1}
```

6. Checking for Key Existence
- You can check whether a key exists in a dictionary using the `in` keyword. 
- Alternatively, `not in` checks if the key is missing.

```python
d = {'a': 1, 'b': 2}
print('a' in d)  # Output: True
print('c' not in d)  # Output: True
```

7. Setting Default Values with `setdefault()`
- The `setdefault()` method checks if a key is present in the dictionary. If the key is not present, it inserts the key with the specified default value.
  
```python
d = {'a': 1}
value = d.setdefault('b', 3)
print(value)  # Output: 3 (default value inserted)
print(d)  # Output: {'a': 1, 'b': 3}
```

8. Creating Dictionaries from Keys (`fromkeys()`)
- `fromkeys()` creates a new dictionary with keys from an iterable and assigns a specified default value to all keys.

```python
keys = ['a', 'b', 'c']
d = dict.fromkeys(keys, 0)
print(d)  # Output: {'a': 0, 'b': 0, 'c': 0}
```

9. Dictionary Views
- Views are dynamic objects that provide a view of dictionary data (`keys()`, `values()`, `items()`). These views update automatically if the dictionary is modified.

```python
d = {'a': 1, 'b': 2}
keys_view = d.keys()
print(keys_view)  # Output: dict_keys(['a', 'b'])

# Modifying the dictionary reflects in the view
d['c'] = 3
print(keys_view)  # Output: dict_keys(['a', 'b', 'c'])
```

10. Sorting a Dictionary by Keys/Values
- While dictionaries don't maintain order (prior to Python 3.7), you can create a sorted dictionary by sorting the items by key or value.
  
```python
d = {'a': 3, 'c': 1, 'b': 2}

# Sort by keys
sorted_by_keys = dict(sorted(d.items()))
print(sorted_by_keys)  # Output: {'a': 3, 'b': 2, 'c': 1}

# Sort by values
sorted_by_values = dict(sorted(d.items(), key=lambda item: item[1]))
print(sorted_by_values)  # Output: {'c': 1, 'b': 2, 'a': 3}
```

11. Default Dictionary (from `collections` module)
- The `defaultdict` automatically assigns a default value for missing keys, making it useful for handling missing keys dynamically without raising errors.

```python
from collections import defaultdict

# Creating a defaultdict with default int values (0)
d = defaultdict(int)
d['a'] += 1  # No KeyError for missing key 'a'
print(d)  # Output: defaultdict(<class 'int'>, {'a': 1})
```

12. Dictionary as a Frequency Counter
- Dictionaries can be used to count occurrences of items in a list or other iterable.

```python
lst = ['apple', 'banana', 'apple', 'orange', 'banana']
count = {}

for item in lst:
    count[item] = count.get(item, 0) + 1

print(count)  # Output: {'apple': 2, 'banana': 2, 'orange': 1}
```

13. Immutable Dictionary Keys
- Only immutable types like strings, numbers, and tuples can be used as dictionary keys. Mutable types like lists and dictionaries cannot be used as keys.

```python
# Invalid key example (raises TypeError)
# d = {[1, 2]: 'invalid'}  # Error: unhashable type: 'list'

# Valid key example
d = {(1, 2): 'valid'}
print(d)  # Output: {(1, 2): 'valid'}
```

14. Shallow Copy of a Dictionary
- You can create a shallow copy of a dictionary using `copy()`.

```python
d1 = {'a': 1, 'b': 2}
d2 = d1.copy()
print(d2)  # Output: {'a': 1, 'b': 2}
```

15. Deep Copy of a Dictionary
- A shallow copy only duplicates the top-level structure, while a deep copy duplicates all nested dictionaries and objects. You can use the `copy` module's `deepcopy()` function for this.

```python
import copy

d1 = {'a': {'x': 1}}
d2 = copy.deepcopy(d1)
d2['a']['x'] = 2

print(d1)  # Output: {'a': {'x': 1}}  (original unaffected)
print(d2)  # Output: {'a': {'x': 2}}  (deep copy modified)
```

16. Dictionary Memory Usage
- Dictionaries in Python are implemented as hash tables. Therefore, they consume more memory than simple lists or tuples because of the overhead of storing hash keys for efficient lookups. For large datasets, you may need to consider memory usage carefully.

17. Nested Dictionaries
- You can create and work with nested dictionaries where values are themselves dictionaries.

```python
nested_dict = {
    'a': {'name': 'apple', 'price': 100},
    'b': {'name': 'banana', 'price': 50}
}

# Accessing nested values
print(nested_dict['a']['name'])  # Output: apple
```

18. Updating Nested Dictionaries
- You can update nested dictionaries directly by accessing the inner dictionary.

```python
nested_dict['a']['price'] = 120
print(nested_dict)  # Output: {'a': {'name': 'apple', 'price': 120}, 'b': {'name': 'banana', 'price': 50}}
```

Conclusion:
