The Python iterator protocol defines 
a standard way to iterate over a collection of items, 
allowing you to traverse elements one by one. 
The protocol consists of two methods:

1. `__iter__()`: This method returns the iterator object itself. 
It is implemented to allow an object to be iterable (i.e., usable in a `for` loop). 
When an iterable is passed to `iter()`, this method is called.

2. `__next__()`: 
This method returns the next item in the sequence. 
It raises the `StopIteration` exception 
when there are no more items to return.

Creating a Custom Iterator
To create a custom iterator, 
you need to implement both the 
    `__iter__()` and 
    `__next__()` methods in a class.

Here's an example of a simple iterator 
that iterates through numbers up to a given limit:

```python
class MyIterator:
    def __init__(self, limit):
        self.limit = limit
        self.current = 0
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current < self.limit:
            self.current += 1
            return self.current - 1
        else:
            raise StopIteration

# Usage
my_iter = MyIterator(5)
for number in my_iter:
    print(number)
```

Explanation:
- `__iter__()` returns `self`, meaning the object is its own iterator.
- `__next__()` increments the `current` value and returns it, 
but raises `StopIteration` once the limit is reached.

Iterable vs. Iterator
- Iterable: 
    Any object that can return an iterator 
    (i.e., has the `__iter__()` method).
- Iterator: 
    An object that implements 
    both the `__iter__()` and `__next__()` methods.

Most built-in Python objects like lists, tuples, and dictionaries are iterable, 
as they implement the `__iter__()` method. 
When you call `iter()` on an iterable, 
it returns an iterator object, 
which you can then traverse with `next()`.