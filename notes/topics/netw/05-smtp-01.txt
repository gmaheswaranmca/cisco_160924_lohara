In Python, the `smtplib` module is used 
to send emails via SMTP (Simple Mail Transfer Protocol). 
This is a built-in library that allows you to create email messages and 
connect to an SMTP server to send those emails.

Steps to Send Emails Using Python's `smtplib`:

1. Import the necessary modules:
   - `smtplib`: For the SMTP connection.
   - `email.mime.text`: For constructing the email body.
   - `email.mime.multipart`: For handling attachments (if necessary).

2. Set up the SMTP server connection.
3. Compose the email.
4. Send the email.

Example: Sending a Simple Email

```python
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Email details
sender_email = "your_email@example.com"
receiver_email = "receiver_email@example.com"
subject = "Test Email from Python"
body = "This is a test email sent from Python!"

# Create the email message
msg = MIMEMultipart()
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Subject'] = subject

# Attach the email body
msg.attach(MIMEText(body, 'plain'))

# SMTP server details
smtp_server = "smtp.gmail.com"
port = 587  # For TLS (or use 465 for SSL)
password = "your_email_password"

# Create a secure connection with the SMTP server
try:
    server = smtplib.SMTP(smtp_server, port)
    server.starttls()  # Secure the connection with TLS
    server.login(sender_email, password)

    # Send the email
    server.sendmail(sender_email, receiver_email, msg.as_string())
    print("Email sent successfully!")
    
except Exception as e:
    print(f"Error: {e}")
finally:
    server.quit()  # Close the connection
```

Key Points:
1. `smtplib.SMTP`: 
    This creates an SMTP client session object 
    to connect to the mail server.
2. `starttls()`: 
    Upgrades the connection 
    to a secure TLS (Transport Layer Security) connection.
3. `login()`: 
    Logs into the SMTP server 
    using the sender's email credentials.
4. `sendmail()`: 
    Sends the email with the `sender_email`, `receiver_email`, and 
    email content (constructed using `msg.as_string()`).
5. `quit()`: 
    Ends the SMTP session.

SMTP Server Details for Common Providers:
- Gmail: 
  - SMTP Server: `smtp.gmail.com`
  - Port: `587` (TLS) or `465` (SSL)
  - Note: Gmail might require you to enable access 
  for less secure apps or use an app-specific password for SMTP access.
  
- Yahoo: 
  - SMTP Server: `smtp.mail.yahoo.com`
  - Port: `587` (TLS) or `465` (SSL)

- Outlook: 
  - SMTP Server: `smtp.office365.com`
  - Port: `587` (TLS)

Sending an Email with an Attachment

If you need to send an email with an attachment, you can extend the code as follows:

```python
from email.mime.base import MIMEBase
from email import encoders

# Attach a file to the email
filename = "example.pdf"  # Path to the file

# Open the file in binary mode
with open(filename, "rb") as attachment:
    part = MIMEBase("application", "octet-stream")
    part.set_payload(attachment.read())

# Encode the file in base64
encoders.encode_base64(part)

# Add header for the attachment
part.add_header("Content-Disposition", f"attachment; filename= {filename}")

# Attach the file to the email
msg.attach(part)
```

Conclusion:
- `smtplib` is Pythonâ€™s built-in library 
for sending emails via SMTP.
- You can send plain text emails or emails with attachments 
by using modules from the `email.mime` package.
- Always be mindful of security considerations 
(like using TLS/SSL and securely managing your email credentials).