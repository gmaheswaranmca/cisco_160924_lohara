The `pdb` module in Python is the built-in interactive debugger 
that helps you debug Python programs. 
It provides an interactive environment 
to inspect variables, 
   step through code, and 
   find where your program is failing.

Here’s a quick guide on how to use `pdb`:

Starting `pdb`

1. Insert `pdb.set_trace()` in your code:
   Place `pdb.set_trace()` in the part of your code 
   where you want to start debugging. 
   The execution will stop at this line, 
   and you’ll enter the debugger prompt.
   ```python
   import pdb

   def divide(a, b):
       pdb.set_trace()  # Start debugger here
       return a / b

   divide(10, 0)
   ```

2. Run Python script with `-m pdb`:
   You can run your entire Python script in debugging mode 
   by using the `-m pdb` option.
   ```bash
   python -m pdb script.py
   ```

Common `pdb` Commands

Once you're inside the `pdb` prompt, 
you can use the following commands:

- `n` (next): Move to the next line of code.
- `s` (step): Step into a function to debug its internal execution.
- `c` (continue): Continue execution until the next breakpoint or the end of the program.
- `l` (list): Display the code around the current line.
- `p` (print): Print the value of a variable or expression.
  ```bash
  (Pdb) p variable_name
  ```
- `q` (quit): Quit the debugger.

Example

```python
import pdb

def calculate_area(length, width):
    pdb.set_trace()  # Debugger starts here
    area = length * width
    return area

result = calculate_area(5, 10)
print(result)
```

When you run this code, 
`pdb` will pause execution at the line with `pdb.set_trace()`, 
and you can use the debugger commands to step through the rest of the code.

=======================================

To use the Python debugger (`pdb`) for the features you're asking about — 
    including 
        continue, 
        step over, 
        step into, 
        step out, and 
        watch local variables, 
        breakpoints — here's a detailed guide.

`pdb` Key Commands:

- Continue (`c`): Continues execution until the next breakpoint or the end of the program.
- Step Into (`s`): Steps into the function call, meaning it will enter the function and start debugging inside it.
- Step Over (`n`): Steps over the function call, meaning it will execute the function but not enter it. The debugger will pause at the next line in the current function.
- Step Out (`r`): Runs until the current function returns (i.e., until you exit the current function).
- Breakpoints (`b`): Set a breakpoint at a specific line or function so the debugger will stop execution at that point.
- Watch variables and locals: Use the `p` or `pp` (pretty-print) commands to inspect variables, and `locals()` to inspect the local scope.

Example Code with Debugging

```python
import pdb

def multiply(x, y):
    result = x * y
    return result

def add_and_multiply(a, b, c):
    sum_result = a + b
    mul_result = multiply(sum_result, c)
    return mul_result

def main():
    pdb.set_trace()  # Start debugger
    result = add_and_multiply(5, 10, 2)
    print(f"Result: {result}")

main()
```

Debugging Session

1. Run the code with the debugger:

   ```bash
   python script.py
   ```

   Once it hits the `pdb.set_trace()`, it will pause, and you will enter the debugger.

Key Commands in Use

1. Set Breakpoints (`b`):
   You can set a breakpoint at a specific line or function before running the script. For example:
   
   ```bash
   (Pdb) b multiply  # Set a breakpoint at the start of multiply function
   (Pdb) b 6  # Set a breakpoint at line 6
   ```

2. Continue (`c`):
   After setting breakpoints, you can continue execution until the breakpoint:
   
   ```bash
   (Pdb) c
   ```

3. Step Into (`s`):
   If you want to step into the `add_and_multiply` or `multiply` function, use the `s` command:
   
   ```bash
   (Pdb) s
   ```

   This will take you inside the `add_and_multiply` or `multiply` function.

4. Step Over (`n`):
   If you want to skip stepping into the function but still execute the next line, use `n` (next):
   
   ```bash
   (Pdb) n
   ```

5. Step Out (`r`):
   If you're inside a function and want to finish it and return to the calling function, use `r` (return):
   
   ```bash
   (Pdb) r
   ```

6. Watch Variables and Locals:
   You can inspect variables with the `p` (print) or `pp` (pretty-print) commands:
   
   ```bash
   (Pdb) p sum_result  # Watch sum_result variable
   (Pdb) pp locals()   # Inspect all local variables
   ```

7. Quit Debugger (`q`):
   To exit the debugger, use the `q` (quit) command:
   
   ```bash
   (Pdb) q
   ```

Example Debugging Flow:

- Start at `pdb.set_trace()`.
- Use `n` to step over the current line.
- Use `s` to step into the `add_and_multiply` function.
- Use `p` to watch local variables like `a`, `b`, `sum_result`.
- Use `r` to step out of the current function.
- Continue execution using `c`.

This sequence allows you to fully navigate your code with breakpoints, 
stepping in and out of functions, and watching variables in real time.
