Strings, Tuples, Lists, Bytearrays, Sets, and Dictionaries in Python

---

1. Strings in Python

Strings in Python are immutable sequences of Unicode characters.

#Creating Strings:
```python
string1 = "Hello, World!"
string2 = 'Python Programming'
multiline_string = '''This is
a multiline
string.'''
```

#String Operations:

- Concatenation: 
  ```python
  greeting = "Hello" + " " + "World!"
  print(greeting)  # Output: Hello World!
  ```

- Repetition:
  ```python
  repeated = "Hello! " * 3
  print(repeated)  # Output: Hello! Hello! Hello!
  ```

- String Slicing:
  ```python
  text = "Python"
  print(text[0:3])  # Output: Pyt
  print(text[-1])   # Output: n
  ```

- String Methods:
  ```python
  print("HELLO".lower())   # Output: hello
  print("hello".upper())   # Output: HELLO
  print("hello".replace('e', 'a'))  # Output: hallo
  ```

- Check Substring:
  ```python
  sentence = "The quick brown fox"
  print("quick" in sentence)  # Output: True
  ```

#Formatting Strings:

- Using `format()` method:
  ```python
  name = "Alice"
  greeting = "Hello, {}!".format(name)
  print(greeting)  # Output: Hello, Alice!
  ```

- Using f-strings (Python 3.6+):
  ```python
  age = 25
  print(f"My age is {age}.")  # Output: My age is 25.
  ```

---

2. Tuples in Python

Tuples are immutable sequences in Python. They are used for grouping related data.

#Creating Tuples:
```python
tuple1 = (1, 2, 3)
tuple2 = ("apple", "banana", "cherry")
empty_tuple = ()
```

#Accessing Tuple Elements:
```python
fruits = ("apple", "banana", "cherry")
print(fruits[0])  # Output: apple
```

#Tuple Unpacking:
```python
person = ("John", 25, "New York")
name, age, city = person
print(name)  # Output: John
```

#Tuple Methods:
- `count()`: Returns the number of occurrences of a value.
- `index()`: Returns the index of the first occurrence of a value.

---

3. Lists in Python

Lists are mutable sequences used to store collections of items.

#Creating Lists:
```python
list1 = [1, 2, 3, 4, 5]
list2 = ["apple", "banana", "cherry"]
```

#List Operations:

- Appending and Inserting:
  ```python
  fruits = ["apple", "banana"]
  fruits.append("cherry")  # Add to the end
  fruits.insert(1, "orange")  # Insert at index 1
  ```

- Removing Elements:
  ```python
  fruits.remove("banana")  # Remove specific element
  fruits.pop()  # Remove the last element
  ```

- Slicing and Indexing:
  ```python
  numbers = [0, 1, 2, 3, 4, 5]
  print(numbers[1:4])  # Output: [1, 2, 3]
  ```

- List Comprehension:
  ```python
  squares = [x  2 for x in range(5)]  # Output: [0, 1, 4, 9, 16]
  ```

---

4. Bytearray in Python

Bytearrays are mutable sequences of bytes, useful for binary data manipulation.

#Creating Bytearrays:
```python
ba = bytearray(b'hello')
```

#Modifying Bytearrays:
```python
ba[0] = 104  # ASCII value of 'h'
print(ba)  # Output: bytearray(b'hello')
```

#Converting Between Bytearray and String:
```python
string = "hello"
ba = bytearray(string, 'utf-8')
new_string = ba.decode('utf-8')
```

---

5. Sets in Python

Sets are unordered collections of unique elements.

#Creating Sets:
```python
set1 = {1, 2, 3, 4, 5}
set2 = set(["apple", "banana", "cherry"])
empty_set = set()
```

#Set Operations:

- Adding and Removing Elements:
  ```python
  fruits = {"apple", "banana"}
  fruits.add("cherry")  # Add element
  fruits.discard("banana")  # Remove element
  ```

- Set Operations (Union, Intersection, Difference):
  ```python
  setA = {1, 2, 3}
  setB = {3, 4, 5}
  
  union_set = setA | setB  # {1, 2, 3, 4, 5}
  intersection_set = setA & setB  # {3}
  difference_set = setA - setB  # {1, 2}
  ```

---

6. Dictionaries in Python

Dictionaries are mutable collections of key-value pairs.

#Creating Dictionaries:
```python
person = {"name": "John", "age": 30, "city": "New York"}
empty_dict = {}
```

#Accessing and Modifying Dictionary Values:
```python
print(person["name"])  # Output: John
person["age"] = 31  # Update value
```

#Dictionary Methods:

- `keys()`, `values()`, `items()`:
  ```python
  print(person.keys())   # Output: dict_keys(['name', 'age', 'city'])
  print(person.values()) # Output: dict_values(['John', 31, 'New York'])
  print(person.items())  # Output: dict_items([('name', 'John'), ('age', 31), ('city', 'New York')])
  ```

- Using `get()` to Safely Access Values:
  ```python
  print(person.get("name"))  # Output: John
  print(person.get("salary", "Not Found"))  # Output: Not Found
  ```

#Dictionary Comprehension:
```python
squares = {x: x  2 for x in range(5)}
print(squares)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
```

---

7. Pythonic Idioms and Anti-Idioms

#Pythonic Idioms:

- Unpacking Iterables in a Loop:
  ```python
  pairs = [(1, 'one'), (2, 'two'), (3, 'three')]
  for num, word in pairs:
      print(f"{num}: {word}")
  ```

- Using `in` for Membership Checking:
  ```python
  fruits = ["apple", "banana", "cherry"]
  if "apple" in fruits:
      print("Apple is present.")
  ```

#Anti-Idioms to Avoid:

- Avoid using loops for simple operations when a built-in function can do the job:
  - Instead of this:
    ```python
    total = 0
    for i in range(5):
        total += i
    ```
  - Use `sum()`:
    ```python
    total = sum(range(5))
    ```

- Avoid using `if len(list) > 0` to check for an empty list:
  - Instead of this:
    ```python
    if len(fruits) > 0:
        print("List is not empty")
    ```
  - Use this:
    ```python
    if fruits:
        print("List is not empty")
    ```

---

